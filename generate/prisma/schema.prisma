generator client {
  provider = "prisma-client-js"
  output   = "../generate/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Post {
  id        String   @id @default(cuid())
  title     String
  content   String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  password  String
  name      String?
  role      UserRole @default(CUSTOMER)
  phone     String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  addresses      Address[]
  orders         Order[]
  cart           Cart?
  reviews        Review[]
  paymentMethods PaymentMethod[]
}

enum UserRole {
  ADMIN
  CUSTOMER
}

model Address {
  id         String   @id @default(cuid())
  userId     String
  street     String
  city       String
  state      String?
  postalCode String
  country    String
  isDefault  Boolean  @default(false)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  user   User    @relation(fields: [userId], references: [id])
  orders Order[]
}

model Category {
  id          String   @id @default(cuid())
  name        String   @unique
  slug        String   @unique
  description String?
  parentId    String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  parent   Category?  @relation("CategoryHierarchy", fields: [parentId], references: [id])
  children Category[] @relation("CategoryHierarchy")
  products Product[]
}

model Product {
  id          String   @id @default(cuid())
  name        String
  slug        String   @unique
  description String?
  price       Decimal  @db.Decimal(10, 2)
  stock       Int      @default(0)
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  categoryId String?
  category   Category?      @relation(fields: [categoryId], references: [id])
  images     ProductImage[]
  reviews    Review[]
  orderItems OrderItem[]
  cartItems  CartItem[]
}

model ProductImage {
  id        String  @id @default(cuid())
  productId String
  url       String
  altText   String?
  isPrimary Boolean @default(false)

  product Product @relation(fields: [productId], references: [id])
}

model Review {
  id        String   @id @default(cuid())
  userId    String
  productId String
  rating    Int      @default(5)
  comment   String?
  createdAt DateTime @default(now())

  user    User    @relation(fields: [userId], references: [id])
  product Product @relation(fields: [productId], references: [id])
}

model Cart {
  id        String   @id @default(cuid())
  userId    String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user  User       @relation(fields: [userId], references: [id])
  items CartItem[]
}

model CartItem {
  id        String   @id @default(cuid())
  cartId    String
  productId String
  quantity  Int      @default(1)
  createdAt DateTime @default(now())

  cart    Cart    @relation(fields: [cartId], references: [id])
  product Product @relation(fields: [productId], references: [id])
}

model Order {
  id          String      @id @default(cuid())
  userId      String
  addressId   String
  totalAmount Decimal     @db.Decimal(10, 2)
  status      OrderStatus @default(PENDING)
  paymentId   String?
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

  user    User        @relation(fields: [userId], references: [id])
  address Address     @relation(fields: [addressId], references: [id])
  payment Payment?    @relation(fields: [paymentId], references: [id])
  items   OrderItem[]
}

model Payment {
  id            String        @id @default(cuid())
  methodId      String
  amount        Decimal       @db.Decimal(10, 2)
  status        PaymentStatus @default(PENDING)
  transactionId String?
  createdAt     DateTime      @default(now())

  method PaymentMethod @relation(fields: [methodId], references: [id])
  orders Order[]
}

model OrderItem {
  id         String  @id @default(cuid())
  orderId    String
  productId  String
  quantity   Int
  unitPrice  Decimal @db.Decimal(10, 2)
  totalPrice Decimal @db.Decimal(10, 2)

  order   Order   @relation(fields: [orderId], references: [id])
  product Product @relation(fields: [productId], references: [id])
}

model PaymentMethod {
  id        String      @id @default(cuid())
  userId    String
  type      PaymentType
  provider  String?
  accountNo String?
  isDefault Boolean     @default(false)
  createdAt DateTime    @default(now())

  user     User      @relation(fields: [userId], references: [id])
  payments Payment[]
}

enum OrderStatus {
  PENDING
  PAID
  SHIPPED
  DELIVERED
  CANCELED
}

enum PaymentStatus {
  PENDING
  COMPLETED
  FAILED
  REFUNDED
}

enum PaymentType {
  CARD
  PAYPAL
  CASH_ON_DELIVERY
  BANK_TRANSFER
}
